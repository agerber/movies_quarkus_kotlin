package edu.uchicago.gerber.quark.repositories

import com.github.javafaker.Faker
import com.mongodb.BasicDBObject
import com.mongodb.client.FindIterable
import com.mongodb.client.MongoClient
import com.mongodb.client.MongoCollection
import com.mongodb.client.MongoCursor
import edu.uchicago.gerber.quark.models.Movie
import io.quarkus.runtime.StartupEvent
import jakarta.enterprise.context.ApplicationScoped
import jakarta.enterprise.event.Observes
import jakarta.enterprise.inject.Default
import jakarta.inject.Inject
import org.bson.Document
import org.bson.types.ObjectId
import java.util.stream.Collectors
import java.util.stream.Stream

@ApplicationScoped
class MovieMongodbRepo : MovieRepoInterface {

        @field:Default
        @field:Inject
        lateinit  var  mongoClient: MongoClient

    companion object {
        //id is auto-generated by mongodb
        const val MOVIE_TITLE_COL = "title"
        const val MOVIE_YEAR_COL = "year"
    }

    val PAGE_SIZE = 20

    //this will get fired when the quarkus microservice starts
    fun onStart(@Observes ev: StartupEvent?) {
        val collectionSize = collection.countDocuments()
        if (collectionSize > 0) return
        val faker = Faker()
        collection.insertMany(
            Stream.generate { //mongo will auto-geneate the _id field for us.
                Document()
                    .append(MOVIE_TITLE_COL, faker.beer().name())
                    .append(MOVIE_YEAR_COL, faker.chuckNorris().fact().hashCode().toString())
            }
                .limit(1000)
                .collect(Collectors.toList()))
    }

    override fun findAll(): List<Movie> {
        val list: MutableList<Movie> = ArrayList()
        collection.find().iterator().use { cursor ->
            while (cursor.hasNext()) {
                val document: Document = cursor.next()
                val movie = Movie()
                movie.id = document.getObjectId("_id").toHexString()
                movie.title = document.getString(MOVIE_TITLE_COL)
                movie.year = document.getString(MOVIE_YEAR_COL).toInt()
                list.add(movie)
            }
        }
        return list
    }

    override fun add(movie: Movie): List<Movie> {
        val document = Document()
            .append(MOVIE_TITLE_COL, movie.title)
            .append(MOVIE_YEAR_COL, movie.year.toString())
        collection.insertOne(document)
        return findAll()
    }

    override operator fun get(id: String): Movie? {
        val query = BasicDBObject()
        query["_id"] = ObjectId(id)
        val documents: FindIterable<Document> = collection.find(query)
        val movies: MutableList<Movie> = ArrayList()
        for (document in documents) {
            movies.add(transform(document))
        }

        //this will produce a 404 not found
        return if (movies.size != 1) null else movies[0]
    }

    override fun paged(pageNumber: Int): List<Movie> {
        val list: MutableList<Movie> = ArrayList()
        try {
            val cursor: MongoCursor<Document> =
                collection.find().skip(PAGE_SIZE * (pageNumber - 1)).limit(PAGE_SIZE).iterator()
            while (cursor.hasNext()) {
                val document = cursor.next()
                list.add(transform(document))
            }
            cursor.close()
        } catch (e: Exception) {
            e.printStackTrace()
        }
        return list
    }

    //for mongo
    private fun transform(document: Document?): Movie {
        val movie = Movie()
        if (document != null && !document.isEmpty()) {
            movie.id = document.getObjectId("_id").toHexString()
            movie.title = document.getString(MOVIE_TITLE_COL)
            movie.year = document.getString(MOVIE_YEAR_COL).toInt()
        }
        return movie
    }

    private val collection: MongoCollection<*>
        private get() = mongoClient.getDatabase("movies_db").getCollection("movies_collection")


}
