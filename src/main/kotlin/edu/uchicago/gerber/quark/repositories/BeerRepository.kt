package edu.uchicago.gerber.quark.repositories

import com.github.javafaker.Faker
import edu.uchicago.gerber.quark.models.Beer
import io.quarkus.mongodb.panache.kotlin.PanacheMongoRepository
import io.quarkus.runtime.StartupEvent
import jakarta.enterprise.context.ApplicationScoped
import jakarta.enterprise.event.Observes
import org.bson.types.ObjectId
import java.util.stream.Stream

@ApplicationScoped
class BeerRepository: PanacheMongoRepository<Beer> {

    //this will get fired when the quarkus microservice starts
    fun onStart(@Observes ev: StartupEvent?) {
        val list = mutableListOf<Beer>()
        repeat(1000){ list.add(generateBeerFromFaker()) }
        persist(list)

    }

    //use this guide to create various CRUD ops
    //https://quarkus.io/guides/mongodb-panache-kotlin

    //todo remove unnessary dependencies
    //fix maven home and surefire.
    //add tests.
    //todo convert to Beer database.

    //CREATE
    //create(Beer)
    fun create(beer: Beer){
        this.persist(beer)
    }
    //create(List<Beer>)
    fun create(beers: List<Beer>){
        this.persist(beers)
    }
    //READ
    //read(id)
    fun findById_(id:String): Beer {
       val beerId = ObjectId(id)
       return this.findById(beerId) ?: throw Exception("No person with that ID")
    }

    //stream all
    fun streamAll_(): Stream<Beer> {
        return this.streamAll()
    }

    //UPDATE
    //update(updateBeer)
    fun update_(updatedBeer: Beer) {
       this.update(updatedBeer);

    }

    //DELETE
    //delete(id)
    fun deleteById_(id:String){
      val beerId = ObjectId(id)
      this.deleteById(beerId)
    }

    fun deleteById_(id:ObjectId){
        this.deleteById(id)
    }

    fun deleteAll_(){
        this.deleteAll()
    }

    //COUNT
    fun count_() : Long{
        return this.count()
    }

    val PAGE_SIZE = 20




    //this is for testing faker
    fun gen5FakerBeers(): List<Beer>{
        val list = mutableListOf<Beer>()
        repeat(5){ list.add(generateBeerFromFaker()) }
        return list
    }



//    operator fun get(id: String?): Movie? {
//        val query = BasicDBObject()
//        query["_id"] = ObjectId(id)
//        val documents: FindIterable<Document> = collection.find(query)
//        val movies: MutableList<Movie> = ArrayList()
//        for (document in documents) {
//            movies.add(transform(document))
//        }
//
//        //this will produce a 404 not found
//        return if (movies.size != 1) null else movies[0]
//    }

//    fun paged(pageNumber: Int): List<Movie> {
//        val list: MutableList<Movie> = ArrayList()
//        try {
//            val cursor: MongoCursor<Document> =
//                collection.find().skip(PAGE_SIZE * (pageNumber - 1)).limit(PAGE_SIZE).iterator()
//            while (cursor.hasNext()) {
//                val document = cursor.next()
//                list.add(transform(document))
//            }
//            cursor.close()
//        } catch (e: Exception) {
//            e.printStackTrace()
//        }
//        return list
//    }
//
//    //for mongo
//    private fun transform(document: Document?): Movie {
//        val movie = Movie()
//        if (document != null && !document.isEmpty()) {
//            movie.id = document.getObjectId("_id").toHexString()
//            movie.title = document.getString(MOVIE_TITLE_COL)
//            movie.year = document.getString(MOVIE_YEAR_COL).toInt()
//        }
//        return movie
//    }
//
//    private val collection: MongoCollection<*>
//        private get() = mongoClient!!.getDatabase("movies_db").getCollection("movies_collection")
//
//    companion object {
//        //id is auto-generated by mongodb
//        const val MOVIE_TITLE_COL = "title"
//        const val MOVIE_YEAR_COL = "year"
//    }


    private fun generateBeerFromFaker(): Beer{
        val faker = Faker()
        val fakerBeer = faker.beer()
        val beer = Beer()
        //we allow mongo to generate the id's for us
        //beer.id = ObjectId.get()
        beer.name = fakerBeer.name()
        beer.hop = fakerBeer.hop()
        beer.malt = fakerBeer.malt()
        beer.style = fakerBeer.style()
        beer.yeast = fakerBeer.yeast()
        return beer
    }

}
